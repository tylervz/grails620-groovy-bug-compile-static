---
name: Java CI
on: [push, pull_request]
# Ensures that only a single workflow in the same concurrency group will run at the same time.
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true
permissions:
  checks: write
  contents: read
env:
  CI_GROOVY_VERSION:
  CI_GRADLE_VERSION:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '11.0.6'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          # Publish a Gradle build scan so you can see all the build logs,
          # a complete task timeline, test outputs, and the resolved dependencies of your build.
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
      - name: Check Env Variables
        run: env
      - name: Check current working directory
        run: pwd

  build_groovy:
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    outputs:
      groovyVersion: ${{ steps.groovy-version.outputs.value }}
      # gradleVersion: ${{ steps.gradle-version.outputs.value }}
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '11.0.6'
      - name: Cache local Maven repository & Groovy
        uses: actions/cache@v4
        with:
          path: |
            ~/groovy
            ~/.m2/repository
          key: cache-local-groovy-maven-${{ github.sha }}
      - name: Checkout Groovy 3_0_X (Grails 5 and later)
        run: cd .. && git clone --depth 1 https://github.com/apache/groovy.git -b GROOVY_3_0_X --single-branch
      - name: Set CI_GROOVY_VERSION for Grails
        id: groovy-version
        run: |
          cd ../groovy
          echo "CI_GROOVY_VERSION=$(cat gradle.properties | grep groovyVersion | cut -d\= -f2 |  tr -d '[:space:]')" >> $GITHUB_ENV
          echo "value=$(cat gradle.properties | grep groovyVersion | cut -d\= -f2 |  tr -d '[:space:]')" >> $GITHUB_OUTPUT
      - name: Check Gradle version
        run: |
          cd ../groovy
          ./gradlew --version
      # - name: Set CI_GRADLE_VERSION for Grails
      #   id: gradle-version
      #   run: |
      #     cd ../groovy
      #     ls
      #     echo "CI_GRADLE_VERSION=$(./gradlew --version | grep -oP 'Gradle \K[0-9.]+')" >> $GITHUB_ENV
      #     echo "value=$(./gradlew --version | grep -oP 'Gradle \K[0-9.]+')" >> $GITHUB_OUTPUT
      - name: Prepare GE Set-up Configuration
        id: ge_conf
        run: |
          echo "VALUE<<EOF" >> $GITHUB_OUTPUT
          echo "plugins { " >> $GITHUB_OUTPUT
          echo "    id 'com.gradle.enterprise' version '3.15.1'" >> $GITHUB_OUTPUT
          echo "    id 'com.gradle.common-custom-user-data-gradle-plugin' version '1.11.3'" >> $GITHUB_OUTPUT
          echo "}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "gradleEnterprise {" >> $GITHUB_OUTPUT
          echo "    server = 'https://ge.grails.org'" >> $GITHUB_OUTPUT
          echo "    buildScan {" >> $GITHUB_OUTPUT
          echo "        publishAlways()" >> $GITHUB_OUTPUT
          echo "        publishIfAuthenticated()" >> $GITHUB_OUTPUT
          echo "        uploadInBackground = System.getenv('CI') == null" >> $GITHUB_OUTPUT
          echo "        capture {" >> $GITHUB_OUTPUT
          echo "            taskInputFiles = true" >> $GITHUB_OUTPUT
          echo "        }" >> $GITHUB_OUTPUT
          echo "    }" >> $GITHUB_OUTPUT
          echo "}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "buildCache {" >> $GITHUB_OUTPUT
          echo "    local { enabled = System.getenv('CI') != 'true' }" >> $GITHUB_OUTPUT
          echo "    remote(gradleEnterprise.buildCache) {" >> $GITHUB_OUTPUT
          echo "        push = System.getenv('CI') == 'true'" >> $GITHUB_OUTPUT
          echo "        enabled = true" >> $GITHUB_OUTPUT
          echo "    }" >> $GITHUB_OUTPUT
          echo "}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Gradle Enterprise Set-up
        run: |
          cd ../groovy
          # Delete exiting plugins and build-scan from settings.gradle file
          sed -i '21,31d' settings.gradle
          # Add Gradle Enterprise set-up related configuration after line no 20 in settings.gradle
          echo "${{ steps.ge_conf.outputs.value}}" | sed -i -e "20r /dev/stdin" settings.gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          # gradle-version: ${{ steps.groovy-version.outputs.value }}
          gradle-version: 6.9.4
          # Publish a Gradle build scan so you can see all the build logs,
          # a complete task timeline, test outputs, and the resolved dependencies of your build.
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
     # TODO: need to figure out best way to execute the Gradle task install for ../groovy
     #  There is a Gradle wrapper in that directory, but if we use that wrapper, then it renders the above step useless I think.
     #  ./../grails620-groovy-bug-compile-static/gradlew
      - name: Build and install groovy (no docs)
        run: |
          pwd
          cd ../groovy
          ./../grails620-groovy-bug-compile-static/gradlew install \
            -x groovydoc \
            -x javadoc \
            -x javadocAll \
            -x groovydocAll \
            -x asciidoc \
            -x docGDK
        env:
          GRADLE_SCANS_ACCEPT: yes
